{"ast":null,"code":"var _jsxFileName = \"/Users/kianaalcala/Documents/React Learning Resources/ReactProject10/src/components/Cart/Checkout.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from 'react';\nimport classes from './Checkout.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst isEmpty = value => value.trim() === '';\n\nconst isFiveChars = value => value.trim().length === 5;\n\nconst Checkout = props => {\n  _s();\n\n  const [formInputsValidity, setFormInputsValidty] = useState({\n    name: true,\n    street: true,\n    city: true,\n    postalCode: true\n  }); // we start with values set to true since we don't want to show warnings \n  // before user has inputted anything \n\n  const nameInputRef = useRef();\n  const streetInputRef = useRef();\n  const postalCodeInputRef = useRef();\n  const cityInputRef = useRef();\n\n  const confirmHandler = event => {\n    event.preventDefault(); // by default, the browser sends an HTTP request\n\n    const enteredName = nameInputRef.current.value;\n    const enteredStreet = streetInputRef.current.value;\n    const enteredPostalCode = postalCodeInputRef.current.value;\n    const enteredCity = cityInputRef.current.value;\n    const enteredNameIsValid = !isEmpty(enteredName);\n    const enteredStreetIsValid = !isEmpty(enteredStreet);\n    const enteredCityIsValid = !isEmpty(enteredCity);\n    const enteredPostalCodeIsValid = isFiveChars(enteredPostalCode);\n    setFormInputsValidty({\n      name: enteredNameIsValid,\n      street: enteredStreetIsValid,\n      city: enteredStreetIsValid,\n      postalCode: enteredPostalCodeIsValid\n    });\n    const formIsValid = enteredNameIsValid && enteredStreetIsValid && enteredCityIsValid && enteredPostalCodeIsValid;\n\n    if (!formIsValid) {\n      return;\n    }\n\n    props.onConfirm({\n      name: enteredName,\n      street: enteredStreet,\n      city: enteredCity,\n      postalCode: enteredPostalCode\n    });\n  };\n\n  const nameControlClasses = `${classes.control} ${formInputsValidity.name ? '' : classes.invalid}`;\n  const streetControlClasses = `${classes.control} ${formInputsValidity.street ? '' : classes.invalid}`;\n  const postalCodeControlClasses = `${classes.control} ${formInputsValidity.postalCode ? '' : classes.invalid}`;\n  const cityControlClasses = `${classes.control} ${formInputsValidity.city ? '' : classes.invalid}`;\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.form,\n    onSubmit: confirmHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        ref: nameInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this), !formInputsValidity.name && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid name!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 42\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: streetControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"street\",\n        children: \"Street\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"street\",\n        ref: streetInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this), !formInputsValidity.street && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid street!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 44\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: postalCodeControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postal\",\n        children: \"Postal Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"postal\",\n        ref: postalCodeInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this), !formInputsValidity.postalCode && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid postal code (5 characters long)!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 48\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cityControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"city\",\n        children: \"City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"city\",\n        ref: cityInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this), !formInputsValidity.city && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid city!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 42\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.actions,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: props.onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.submit,\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Checkout, \"Orw2t0Wn7q9TWZYKZtzuxJvEGLI=\");\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["/Users/kianaalcala/Documents/React Learning Resources/ReactProject10/src/components/Cart/Checkout.js"],"names":["useRef","useState","classes","isEmpty","value","trim","isFiveChars","length","Checkout","props","formInputsValidity","setFormInputsValidty","name","street","city","postalCode","nameInputRef","streetInputRef","postalCodeInputRef","cityInputRef","confirmHandler","event","preventDefault","enteredName","current","enteredStreet","enteredPostalCode","enteredCity","enteredNameIsValid","enteredStreetIsValid","enteredCityIsValid","enteredPostalCodeIsValid","formIsValid","onConfirm","nameControlClasses","control","invalid","streetControlClasses","postalCodeControlClasses","cityControlClasses","form","actions","onCancel","submit"],"mappings":"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","sourcesContent":["import { useRef, useState } from 'react';\n\nimport classes from './Checkout.module.css';\n\nconst isEmpty = value => value.trim() === '';\nconst isFiveChars = value => value.trim().length === 5;\n\nconst Checkout = (props) => {\n    const [formInputsValidity, setFormInputsValidty] = useState({\n      name: true,\n      street: true,\n      city: true,\n      postalCode: true\n    });\n    // we start with values set to true since we don't want to show warnings \n    // before user has inputted anything \n\n    const nameInputRef = useRef();\n    const streetInputRef = useRef();\n    const postalCodeInputRef = useRef();\n    const cityInputRef = useRef();\n\n    const confirmHandler = (event) => {\n        event.preventDefault();\n        // by default, the browser sends an HTTP request\n\n        const enteredName = nameInputRef.current.value;\n        const enteredStreet = streetInputRef.current.value;\n        const enteredPostalCode = postalCodeInputRef.current.value;\n        const enteredCity = cityInputRef.current.value;\n\n        const enteredNameIsValid = !isEmpty(enteredName);\n        const enteredStreetIsValid = !isEmpty(enteredStreet);\n        const enteredCityIsValid = !isEmpty(enteredCity);\n        const enteredPostalCodeIsValid = isFiveChars(enteredPostalCode);\n\n        setFormInputsValidty({\n          name: enteredNameIsValid,\n          street: enteredStreetIsValid,\n          city: enteredStreetIsValid,\n          postalCode: enteredPostalCodeIsValid\n        });\n        \n        const formIsValid = \n          enteredNameIsValid && \n          enteredStreetIsValid && \n          enteredCityIsValid && \n          enteredPostalCodeIsValid;\n\n        \n          \n        if (!formIsValid) {\n          return;\n        } \n\n          props.onConfirm({\n            name: enteredName,\n            street: enteredStreet,\n            city: enteredCity,\n            postalCode: enteredPostalCode\n          });\n      };\n\n      const nameControlClasses = `${classes.control} ${\n        formInputsValidity.name ? '' : classes.invalid\n      }`\n      const streetControlClasses = `${classes.control} ${\n        formInputsValidity.street ? '' : classes.invalid\n      }`\n      const postalCodeControlClasses = `${classes.control} ${\n        formInputsValidity.postalCode ? '' : classes.invalid\n      }`\n      const cityControlClasses = `${classes.control} ${\n        formInputsValidity.city ? '' : classes.invalid\n      }`\n\n    return (\n        <form className={classes.form} onSubmit={confirmHandler}>\n          <div className={nameControlClasses}>\n            <label htmlFor='name'>Your Name</label>\n            <input type='text' id='name' ref={nameInputRef}/>\n            {!formInputsValidity.name && <p>Please enter a valid name!</p>}\n          </div>\n          <div className={streetControlClasses}>\n            <label htmlFor='street'>Street</label>\n            <input type='text' id='street' ref={streetInputRef}/>\n            {!formInputsValidity.street && <p>Please enter a valid street!</p>}\n          </div>\n          <div className={postalCodeControlClasses}>\n            <label htmlFor='postal'>Postal Code</label>\n            <input type='text' id='postal' ref={postalCodeInputRef}/>\n            {!formInputsValidity.postalCode && <p>Please enter a valid postal code (5 characters long)!</p>}\n          </div>\n          <div className={cityControlClasses}>\n            <label htmlFor='city'>City</label>\n            <input type='text' id='city' ref={cityInputRef} />\n            {!formInputsValidity.city && <p>Please enter a valid city!</p>}\n          </div>\n          <div className={classes.actions}>\n            <button type='button' onClick={props.onCancel}>\n              Cancel\n            </button>\n            <button className={classes.submit}>Confirm</button>\n          </div>\n        </form>\n      );\n    };\n    \n    export default Checkout;"]},"metadata":{},"sourceType":"module"}