{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from './counter';\nimport authReducer from './auth'; // with a slicer (which are now moved into their own files under the store foler), \n// we do not need the reducer function below anymore\n// slicer avoids redundant code \n// const counterReducer = (state = initialState, action) => {\n//     if (action.type === 'increment') {\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter\n//         };\n//     }\n//     // why return state, why override the existing state?\n//     // bc we do not want to mutate the existing state since objects and arrays are\n//     // reference values in JavaScript \n//     // avoid state.counter++ bc it can lead to bugs\n//     if (action.type === 'increase') {\n//         return {\n//             counter: state.counter + action.amount,\n//             showCounter: state.showCounter\n//         };\n//     }\n//     if (action.type === 'decrement') {\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         };\n//     }\n//     if (action.type === 'toggle') {\n//         return {\n//             showCounter: !state.showCounter,\n//             counter: state.counter\n//         };\n//     }\n//     return state;\n// };\n\nconst store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    auth: authReducer\n  }\n}); // you can only call configureStore once and the store only has one root reducer\n// fortunately, reducer not only accepts an argument but also an object which \n// acts as a map of reducers \n// key names (ie like counter and auth) are up to you \n// each reducer automatically gets merged together into one main reducer which is exposed to the store \n\nexport default store;","map":{"version":3,"sources":["/Users/kianaalcala/Documents/React Learning Resources/ReactProject12/src/store/index.js"],"names":["configureStore","counterReducer","authReducer","store","reducer","counter","auth"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AAEA,OAAOC,cAAP,MAA2B,WAA3B;AACA,OAAOC,WAAP,MAAwB,QAAxB,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA,MAAMC,KAAK,GAAGH,cAAc,CAAC;AACzBI,EAAAA,OAAO,EAAE;AAAEC,IAAAA,OAAO,EAAEJ,cAAX;AAA2BK,IAAAA,IAAI,EAAEJ;AAAjC;AADgB,CAAD,CAA5B,C,CAIA;AACA;AACA;AACA;AACA;;AAEA,eAAeC,KAAf","sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\n\nimport counterReducer from './counter';\nimport authReducer from './auth';\n\n// with a slicer (which are now moved into their own files under the store foler), \n// we do not need the reducer function below anymore\n// slicer avoids redundant code \n\n// const counterReducer = (state = initialState, action) => {\n//     if (action.type === 'increment') {\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter\n//         };\n//     }\n\n//     // why return state, why override the existing state?\n//     // bc we do not want to mutate the existing state since objects and arrays are\n//     // reference values in JavaScript \n//     // avoid state.counter++ bc it can lead to bugs\n\n//     if (action.type === 'increase') {\n//         return {\n//             counter: state.counter + action.amount,\n//             showCounter: state.showCounter\n//         };\n//     }\n\n\n//     if (action.type === 'decrement') {\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         };\n//     }\n\n//     if (action.type === 'toggle') {\n//         return {\n//             showCounter: !state.showCounter,\n//             counter: state.counter\n//         };\n//     }\n\n//     return state;\n// };\n\nconst store = configureStore({\n    reducer: { counter: counterReducer, auth: authReducer }\n});\n\n// you can only call configureStore once and the store only has one root reducer\n// fortunately, reducer not only accepts an argument but also an object which \n// acts as a map of reducers \n// key names (ie like counter and auth) are up to you \n// each reducer automatically gets merged together into one main reducer which is exposed to the store \n\nexport default store;"]},"metadata":{},"sourceType":"module"}