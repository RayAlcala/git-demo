{"ast":null,"code":"var _jsxFileName = \"/Users/kianaalcala/Documents/React Learning Resources/ReactProject12/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { Provider } from 'react-redux'; // Provider is a component \n\nimport './index.css';\nimport App from './App';\nimport store from './store/index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(Provider, {\n  store: store,\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 37\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 11,\n  columnNumber: 13\n}, this)); // we only need to provide the Redux store to the React app once, \n// and we provide it at the highest level in our React application\n// to the top of our component tree where we render this root component \n// since our entire app needs access to the store\n// you can wrap nested components with Provider, but only those wrapped\n// compponents and their child components will have access to the Redux store \n// with access to the store, our components can get data out of the store, \n// aka set up a subscription, and dispatch actions","map":{"version":3,"sources":["/Users/kianaalcala/Documents/React Learning Resources/ReactProject12/src/index.js"],"names":["React","ReactDOM","Provider","App","store","root","createRoot","document","getElementById","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,SAASC,QAAT,QAAyB,aAAzB,C,CACA;;AAEA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,KAAP,MAAkB,eAAlB;;AAEA,MAAMC,IAAI,GAAGJ,QAAQ,CAACK,UAAT,CAAoBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAApB,CAAb;AACAH,IAAI,CAACI,MAAL,eAAY,QAAC,QAAD;AAAU,EAAA,KAAK,EAAEL,KAAjB;AAAA,yBAAwB,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAxB;AAAA;AAAA;AAAA;AAAA,QAAZ,E,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { Provider } from 'react-redux';\n// Provider is a component \n\nimport './index.css';\nimport App from './App';\nimport store from './store/index';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<Provider store={store}><App /></Provider>);\n\n// we only need to provide the Redux store to the React app once, \n// and we provide it at the highest level in our React application\n// to the top of our component tree where we render this root component \n// since our entire app needs access to the store\n// you can wrap nested components with Provider, but only those wrapped\n// compponents and their child components will have access to the Redux store \n// with access to the store, our components can get data out of the store, \n// aka set up a subscription, and dispatch actions "]},"metadata":{},"sourceType":"module"}