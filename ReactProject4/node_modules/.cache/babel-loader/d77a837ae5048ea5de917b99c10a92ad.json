{"ast":null,"code":"var _jsxFileName = \"/Users/kianaalcala/Documents/React Learning Resources/ReactProject3/src/components/Login/Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer, useContext, useRef } from 'react';\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\nimport AuthContext from '../../store/auth-context';\nimport Input from '../UI/Input/Input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst emailReducer = (state, action) => {\n  if (action.type === 'USER_INPUT') {\n    return {\n      value: action.val,\n      isValid: action.val.includes('@')\n    };\n  }\n\n  if (action.type === 'INPUT_BLUR') {\n    return {\n      value: state.value,\n      isValid: state.value\n    };\n  }\n\n  return {\n    value: '',\n    isValid: false\n  };\n};\n\nconst passwordReducer = (state, action) => {\n  if (action.type === 'USER_INPUT') {\n    return {\n      value: action.val,\n      isValid: action.val.trim().length > 6\n    };\n  }\n\n  if (action.type === 'INPUT_BLUR') {\n    return {\n      value: state.value,\n      isValid: state.value.trim().length > 6\n    };\n  }\n\n  return {\n    value: '',\n    isValid: false\n  };\n};\n\nconst Login = props => {\n  _s();\n\n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [emailIsValid, setEmailIsValid] = useState();\n  // const [enteredPassword, setEnteredPassword] = useState('');\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: '',\n    isValid: null\n  });\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    value: '',\n    isValid: null\n  });\n  const authCtx = useContext(AuthContext);\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n  useEffect(() => {\n    console.log('EFFECT RUNNING');\n    return () => {\n      console.log('EFFECT CLEANUP');\n    };\n  }, []);\n  const {\n    isValid: emailIsValid\n  } = emailState;\n  const {\n    isValid: passwordIsValid\n  } = passwordState; // the above is object destructuring, evident by the curly braces to the left of = \n  // we are not doing value assignment, we are doing alias assignment\n  // this is incorporated so that react stops checking for validity after validity is already satisfied\n\n  useEffect(() => {\n    // useEffect is used to rerun code whenenver one of the dependecies changes\n    // it reruns logic when data, state, or props change\n    // useEffect handles side effects \n    // which include http requests and listening to keystrokes and \n    // saving that entered data to check and update form validty\n    const identifier = setTimeout(() => {\n      console.log('Checking form validity!');\n      setFormIsValid(emailIsValid && passwordIsValid);\n    }, 500);\n    return () => {\n      console.log('CLEANUP');\n      clearTimeout(identifier);\n    }; // this cleanup resets the timer when the user types within 500 millieseconds \n    // this prevents multiple timers running for each keystroke \n    // timeout occurs only after 500ms from the last keystroke\n  }, [emailIsValid, passwordIsValid]); // after every login component function execution\n  // it will rerun this ueEffect function but only if either \n  // emailIsValid or passwordIsValid changed in the last component rerender cycle\n  // inside the array are dependenices \n  // this function makes the login button available when the email and password fields are satisfied\n\n  const emailChangeHandler = event => {\n    dispatchEmail({\n      type: 'USER_INPUT',\n      val: event.target.value\n    }); // setFormIsValid (\n    //   event.target.value.includes('@') && passwordState.isValid \n    // );\n  };\n\n  const passwordChangeHandler = event => {\n    dispatchPassword({\n      type: 'USER_INPUT',\n      val: event.target.value\n    }); // setFormIsValid(\n    //   emailState.isValid && event.target.value.trim().length > 6\n    // );\n  };\n\n  const validateEmailHandler = () => {\n    dispatchEmail({\n      type: 'INPUT_BLUR'\n    });\n  };\n\n  const validatePasswordHandler = () => {\n    dispatchPassword({\n      type: 'INPUT_BLUR'\n    });\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n\n    if (formIsValid) {\n      authCtx.onLogin(emailState.value, passwordState.value);\n    } else if (!emailIsValid) {\n      emailInputRef.current.focus();\n    } else {\n      passwordInputRef.current.focus();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        ref: emailInputRef,\n        id: \"email\",\n        label: \"E-Mail\",\n        type: \"email\",\n        isValid: emailIsValid,\n        value: emailState.value,\n        onChange: emailChangeHandler,\n        onBlur: validateEmailHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        ref: passwordInputRef,\n        id: \"password\",\n        label: \"Password\",\n        type: \"password\",\n        isValid: passwordIsValid,\n        value: passwordState.value,\n        onChange: passwordChangeHandler,\n        onBlur: validatePasswordHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"lp5Pk9GkNDsznA8jvd5PKk8OdFI=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/kianaalcala/Documents/React Learning Resources/ReactProject3/src/components/Login/Login.js"],"names":["React","useState","useEffect","useReducer","useContext","useRef","Card","classes","Button","AuthContext","Input","emailReducer","state","action","type","value","val","isValid","includes","passwordReducer","trim","length","Login","props","formIsValid","setFormIsValid","emailState","dispatchEmail","passwordState","dispatchPassword","authCtx","emailInputRef","passwordInputRef","console","log","emailIsValid","passwordIsValid","identifier","setTimeout","clearTimeout","emailChangeHandler","event","target","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","current","focus","login","actions","btn"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer, useContext, useRef } from 'react';\n\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\nimport AuthContext from '../../store/auth-context';\nimport Input from '../UI/Input/Input';\n\nconst emailReducer=(state, action) => {\n  if (action.type === 'USER_INPUT') {\n    return { value: action.val, isValid: action.val.includes('@') };\n  }\n  if (action.type === 'INPUT_BLUR') {\n    return { value: state.value, isValid: state.value };\n  }\n  return { value: '', isValid: false };\n};\n\nconst passwordReducer = (state, action) => {\n  if (action.type === 'USER_INPUT') {\n    return { value: action.val, isValid: action.val.trim().length > 6 };\n  }\n  if (action.type === 'INPUT_BLUR') {\n    return { value: state.value, isValid: state.value.trim().length > 6 };\n  }\n  return { value: '', isValid: false };\n};\n\nconst Login = (props) => {\n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [emailIsValid, setEmailIsValid] = useState();\n  // const [enteredPassword, setEnteredPassword] = useState('');\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: '', \n    isValid: null\n  });\n\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n      value: '', \n      isValid: null\n    });\n\n    const authCtx = useContext(AuthContext);\n\n    const emailInputRef = useRef();\n    const passwordInputRef = useRef();\n  \n    useEffect(() => {\n    console.log('EFFECT RUNNING');\n\n      return () => {\n        console.log('EFFECT CLEANUP');\n      };\n  }, []);\n\n  const { isValid: emailIsValid } = emailState;\n  const { isValid: passwordIsValid } = passwordState;\n  // the above is object destructuring, evident by the curly braces to the left of = \n  // we are not doing value assignment, we are doing alias assignment\n  // this is incorporated so that react stops checking for validity after validity is already satisfied\n\n  useEffect(() => {\n    // useEffect is used to rerun code whenenver one of the dependecies changes\n    // it reruns logic when data, state, or props change\n    // useEffect handles side effects \n    // which include http requests and listening to keystrokes and \n    // saving that entered data to check and update form validty\n    const identifier = setTimeout(() => {\n    console.log('Checking form validity!');\n        setFormIsValid(\n          emailIsValid && passwordIsValid\n        );\n      }, 500);\n\n      return () => {\n        console.log('CLEANUP');\n        clearTimeout(identifier);\n      };\n      // this cleanup resets the timer when the user types within 500 millieseconds \n      // this prevents multiple timers running for each keystroke \n      // timeout occurs only after 500ms from the last keystroke\n  }, [emailIsValid, passwordIsValid]);\n    // after every login component function execution\n    // it will rerun this ueEffect function but only if either \n    // emailIsValid or passwordIsValid changed in the last component rerender cycle\n    // inside the array are dependenices \n    // this function makes the login button available when the email and password fields are satisfied\n\n\n  const emailChangeHandler = (event) => {\n    dispatchEmail({type: 'USER_INPUT', val: event.target.value});\n  \n    // setFormIsValid (\n    //   event.target.value.includes('@') && passwordState.isValid \n    // );\n};\n\n  const passwordChangeHandler = (event) => {\n    dispatchPassword({type: 'USER_INPUT', val: event.target.value})\n\n    // setFormIsValid(\n    //   emailState.isValid && event.target.value.trim().length > 6\n    // );\n  };\n\n  const validateEmailHandler = () => {\n    dispatchEmail({type: 'INPUT_BLUR'});\n  };\n\n  const validatePasswordHandler = () => {\n   dispatchPassword({type: 'INPUT_BLUR'})\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    if (formIsValid) {\n    authCtx.onLogin(emailState.value, passwordState.value);\n    } else if(!emailIsValid) {\n        emailInputRef.current.focus();\n    } else { \n        passwordInputRef.current.focus();\n    }\n  };\n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n       <Input \n          ref={emailInputRef}\n          id=\"email\"\n          label=\"E-Mail\"\n          type=\"email\"\n          isValid={emailIsValid}\n          value={emailState.value}\n          onChange={emailChangeHandler}\n          onBlur={validateEmailHandler}\n       />\n\n        <Input \n          ref={passwordInputRef}\n          id=\"password\"\n          label=\"Password\"\n          type=\"password\"\n          isValid={passwordIsValid}\n          value={passwordState.value}\n          onChange={passwordChangeHandler}\n          onBlur={validatePasswordHandler}\n       />\n        \n        <div className={classes.actions}>\n          <Button type=\"submit\" className={classes.btn}>\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}